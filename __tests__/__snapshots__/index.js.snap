// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Generates JAVASCRIPT class from Open Api 3.0 spec 1`] = `
"/* eslint-disable */
import 'isomorphic-fetch';

class Api {
  constructor() {
    this.baseUrl = null;
    this.token = null;
    this.headers = [];
  }

  serializeQueryParams(parameters) {
    return Object.keys(parameters)
      .reduce((acc, p) => {
        const param = parameters[p];
        if (typeof param === 'undefined' || param === '') {
          return acc;
        }
        return [
          ...acc,
          \`\${encodeURIComponent(p)}=\${encodeURIComponent(
            String(parameters[p]),
          )}\`,
        ];
      }, [])
      .join('&');
  }

  paramsToObject(params) {
    let query = params.substr(1);
    let result = {};
    query.split('&').forEach(function (part) {
      let item = part.split('=');
      result[item[0]] = decodeURIComponent(item[1]);
    });
    return result;
  }

  mergeQueryParams(parameters, queryParameters) {
    if (parameters.$queryParameters) {
      Object.keys(parameters.$queryParameters).forEach(function (
        parameterName,
      ) {
        const parameter = parameters.$queryParameters[parameterName];
        queryParameters[parameterName] = parameter;
      });
    }
    return queryParameters;
  }

  transformParameter(value, transformOperation = null) {
    switch (transformOperation) {
      case 'joinUsingPipes':
        return Array.isArray(value) ? value.join('|') : value;
      default:
        return value;
    }
  }

  /**
   * HTTP Request
   * @method
   * @param {string} method - http method
   * @param {string} url - url to do request
   * @param {object} body - body parameters / object
   * @param {object} headers - header parameters
   * @param {object} queryParameters - querystring parameters
   */
  request(
    method,
    url,
    body,
    headers,
    queryParameters,
    form,
    checkFor401 = true,
  ) {
    const queryParams =
      queryParameters && Object.keys(queryParameters).length
        ? this.serializeQueryParams(queryParameters)
        : null;
    const urlWithParams = url + (queryParams ? '?' + queryParams : '');

    // ugly hack, we need to delete Content-Type header with multipart/form-data
    // that way, browser will calculate form specific headers on it's own
    if (headers.get('Content-Type') === 'multipart/form-data') {
      headers.delete('Content-Type');
    }

    if (body && !Object.keys(body).length) {
      body = undefined;
    } else {
      body = JSON.stringify(body);
    }

    if (form && Object.keys(form).length) {
      body = new FormData();
      for (let k in form) {
        body.append(k, form[k]);
      }
    }

    if (this.headers.length > 0) {
      this.headers.forEach((h) => {
        headers.append(h.name, h.value);
      });
    }

    return fetch(urlWithParams, {
      method,
      headers,
      body,
    })
      .then((response) => {
        if (checkFor401) {
          if (response.status === 401) {
            if (typeof this._onResponseUnauthorized === 'function') {
              this._onResponseUnauthorized();
            } else {
              let error = new Error(response.statusText);
              error.response = response;
              throw error;
            }
          }
        }

        if (response.status === 204) return response;

        if (response.ok) {
          const responseContentType =
            (response.headers && response.headers.get('Content-Type')) || '';
          if (responseContentType.includes('application/json')) {
            return response.json();
          }
          return response;
        } else {
          let error = new Error(response.statusText);
          error.response = response;
          throw error;
        }
      })
      .catch((error) => {
        return error.response.json().then((error_details) => {
          error.details = error_details;
          throw error;
        });
      });
  }

  /**
   * Set base url
   * @method
   * @param {string} baseUrl
   */
  setBaseUrl(baseUrl) {
    this.baseUrl = baseUrl;
  }

  /**
   * Set Headers
   * @method
   * @param headers - array of headers
   */
  setHeaders(headers) {
    this.headers = headers;
  }

  set onResponseUnauthorized(callback) {
    this._onResponseUnauthorized = callback;
  }

  /**
   * Redirects a user to a given url
   * @method
   * @param {string} url
   */
  redirect(url) {
    window.location = url;
  }

  /**
   * Set Token
   * @method
   * @param {string} token - token's value
   */
  setToken(token) {
    this.token = token;
  }

  /**
   * Set Auth headers
   * @method
   * @param {object} headerParams - headers object
   */
  appendAuthHeaders(headerParams) {
    const headers = new Headers(headerParams);
    if (this.token) {
      headers.append('Authorization', \`Bearer \${this.token}\`);
    }
    return headers;
  }

  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   * @param {} parameters.queryParam1 -
   * @param {} parameters.queryParam2 -
   * @param {} parameters.queryParam3 -
   * @param {} parameters.queryParam4 -
   * @param {} parameters.queryParam5 -
   * @param {} pathParameter1 - Parameter 1
   * @param {} pathParameter2 - Parameter 2
   * @param {} pathParameter3 - Parameter 3
   */
  simpleGetOperation(
    pathParameter1,
    pathParameter2,
    pathParameter3,
    parameters = {},
  ) {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers.append('Accept', 'application/json');

    if (typeof parameters['queryParam1'] !== 'undefined') {
      queryParameters['queryParam1'] = parameters['queryParam1'];
    }

    queryParameters['queryParam1'] = this.transformParameter(
      queryParameters['queryParam1'],
    );

    if (typeof parameters['queryParam1'] === 'undefined') {
      throw Error('Missing required parameter: queryParam1');
    }

    if (typeof parameters['queryParam2'] !== 'undefined') {
      queryParameters['queryParam2'] = parameters['queryParam2'];
    }

    queryParameters['queryParam2'] = this.transformParameter(
      queryParameters['queryParam2'],
    );

    queryParameters['query_param_3'] = 'ACTIVE';

    if (typeof parameters['queryParam3'] !== 'undefined') {
      queryParameters['query_param_3'] = parameters['queryParam3'];
    }

    queryParameters['query_param_3'] = this.transformParameter(
      queryParameters['query_param_3'],
    );

    queryParameters['queryParam4'] = [1, 'Two', 'Three', 4];

    if (typeof parameters['queryParam4'] !== 'undefined') {
      queryParameters['queryParam4'] = parameters['queryParam4'];
    }

    queryParameters['queryParam4'] = this.transformParameter(
      queryParameters['queryParam4'],
      'joinUsingPipes',
    );

    if (typeof parameters['queryParam5'] !== 'undefined') {
      queryParameters['queryParam5'] = parameters['queryParam5'];
    }

    queryParameters['queryParam5'] = this.transformParameter(
      queryParameters['queryParam5'],
    );

    path = path.replace('{path_parameter_1}', pathParameter1);

    path = path.replace('{path_parameter_2}', pathParameter2);

    path = path.replace('{path_parameter_3}', pathParameter3);

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   * @param {} pathParameter1 - Parameter 1
   * @param {} pathParameter2 - Parameter 2
   * @param {} pathParameter3 - Parameter 3
   * @param {} parameters.body -
   */
  simplePostOperation(
    pathParameter1,
    pathParameter2,
    pathParameter3,
    parameters = {},
  ) {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'application/json');
    headers.append('Accept', 'application/json');

    path = path.replace('{path_parameter_1}', pathParameter1);

    path = path.replace('{path_parameter_2}', pathParameter2);

    path = path.replace('{path_parameter_3}', pathParameter3);

    if (typeof parameters['body'] !== 'undefined') {
      body = parameters['body'];
    }

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   * @param {} parameters.body -
   */
  simpleUploadOperation(parameters = {}) {
    let path = '/upload';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'multipart/form-data');
    headers.append('Accept', 'application/json');

    if (typeof parameters['body'] !== 'undefined') {
      form['body'] = parameters['body'];
    }

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   */
  endpointWithoutOkResponse(parameters = {}) {
    let path = '/endpoint-without-ok-response';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers.append('Accept', 'application/json');

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   */
  endpointWithAllOf(parameters = {}) {
    let path = '/endpoint-with-all-of';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers.append('Accept', 'application/json');

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
}

export default new Api();
export { Api };
"
`;

exports[`Generates JAVASCRIPT class from Swagger 2 spec 1`] = `
"/* eslint-disable */
import 'isomorphic-fetch';

class Api {
  constructor() {
    this.baseUrl = null;
    this.token = null;
    this.headers = [];
  }

  serializeQueryParams(parameters) {
    return Object.keys(parameters)
      .reduce((acc, p) => {
        const param = parameters[p];
        if (typeof param === 'undefined' || param === '') {
          return acc;
        }
        return [
          ...acc,
          \`\${encodeURIComponent(p)}=\${encodeURIComponent(
            String(parameters[p]),
          )}\`,
        ];
      }, [])
      .join('&');
  }

  paramsToObject(params) {
    let query = params.substr(1);
    let result = {};
    query.split('&').forEach(function (part) {
      let item = part.split('=');
      result[item[0]] = decodeURIComponent(item[1]);
    });
    return result;
  }

  mergeQueryParams(parameters, queryParameters) {
    if (parameters.$queryParameters) {
      Object.keys(parameters.$queryParameters).forEach(function (
        parameterName,
      ) {
        const parameter = parameters.$queryParameters[parameterName];
        queryParameters[parameterName] = parameter;
      });
    }
    return queryParameters;
  }

  transformParameter(value, transformOperation = null) {
    switch (transformOperation) {
      case 'joinUsingPipes':
        return Array.isArray(value) ? value.join('|') : value;
      default:
        return value;
    }
  }

  /**
   * HTTP Request
   * @method
   * @param {string} method - http method
   * @param {string} url - url to do request
   * @param {object} body - body parameters / object
   * @param {object} headers - header parameters
   * @param {object} queryParameters - querystring parameters
   */
  request(
    method,
    url,
    body,
    headers,
    queryParameters,
    form,
    checkFor401 = true,
  ) {
    const queryParams =
      queryParameters && Object.keys(queryParameters).length
        ? this.serializeQueryParams(queryParameters)
        : null;
    const urlWithParams = url + (queryParams ? '?' + queryParams : '');

    // ugly hack, we need to delete Content-Type header with multipart/form-data
    // that way, browser will calculate form specific headers on it's own
    if (headers.get('Content-Type') === 'multipart/form-data') {
      headers.delete('Content-Type');
    }

    if (body && !Object.keys(body).length) {
      body = undefined;
    } else {
      body = JSON.stringify(body);
    }

    if (form && Object.keys(form).length) {
      body = new FormData();
      for (let k in form) {
        body.append(k, form[k]);
      }
    }

    if (this.headers.length > 0) {
      this.headers.forEach((h) => {
        headers.append(h.name, h.value);
      });
    }

    return fetch(urlWithParams, {
      method,
      headers,
      body,
    })
      .then((response) => {
        if (checkFor401) {
          if (response.status === 401) {
            if (typeof this._onResponseUnauthorized === 'function') {
              this._onResponseUnauthorized();
            } else {
              let error = new Error(response.statusText);
              error.response = response;
              throw error;
            }
          }
        }

        if (response.status === 204) return response;

        if (response.ok) {
          const responseContentType =
            (response.headers && response.headers.get('Content-Type')) || '';
          if (responseContentType.includes('application/json')) {
            return response.json();
          }
          return response;
        } else {
          let error = new Error(response.statusText);
          error.response = response;
          throw error;
        }
      })
      .catch((error) => {
        return error.response.json().then((error_details) => {
          error.details = error_details;
          throw error;
        });
      });
  }

  /**
   * Set base url
   * @method
   * @param {string} baseUrl
   */
  setBaseUrl(baseUrl) {
    this.baseUrl = baseUrl;
  }

  /**
   * Set Headers
   * @method
   * @param headers - array of headers
   */
  setHeaders(headers) {
    this.headers = headers;
  }

  set onResponseUnauthorized(callback) {
    this._onResponseUnauthorized = callback;
  }

  /**
   * Redirects a user to a given url
   * @method
   * @param {string} url
   */
  redirect(url) {
    window.location = url;
  }

  /**
   * Set Token
   * @method
   * @param {string} token - token's value
   */
  setToken(token) {
    this.token = token;
  }

  /**
   * Set Auth headers
   * @method
   * @param {object} headerParams - headers object
   */
  appendAuthHeaders(headerParams) {
    const headers = new Headers(headerParams);
    if (this.token) {
      headers.append('Authorization', \`Bearer \${this.token}\`);
    }
    return headers;
  }

  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   * @param {string} parameters.queryParam1 -
   * @param {array} parameters.queryParam2 -
   * @param {string} parameters.queryParam3 -
   * @param {array} parameters.queryParam4 -
   * @param {string} parameters.queryParam5 -
   * @param {string} pathParameter1 -
   * @param {string} pathParameter2 -
   * @param {string} pathParameter3 -
   */
  simpleGetOperation(
    pathParameter1,
    pathParameter2,
    pathParameter3,
    parameters = {},
  ) {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers.append('Accept', 'application/json');

    if (typeof parameters['queryParam1'] !== 'undefined') {
      queryParameters['queryParam1'] = parameters['queryParam1'];
    }

    queryParameters['queryParam1'] = this.transformParameter(
      queryParameters['queryParam1'],
    );

    if (typeof parameters['queryParam1'] === 'undefined') {
      throw Error('Missing required parameter: queryParam1');
    }

    if (typeof parameters['queryParam2'] !== 'undefined') {
      queryParameters['queryParam2'] = parameters['queryParam2'];
    }

    queryParameters['queryParam2'] = this.transformParameter(
      queryParameters['queryParam2'],
    );

    queryParameters['query_param_3'] = 'ACTIVE';

    if (typeof parameters['queryParam3'] !== 'undefined') {
      queryParameters['query_param_3'] = parameters['queryParam3'];
    }

    queryParameters['query_param_3'] = this.transformParameter(
      queryParameters['query_param_3'],
    );

    queryParameters['queryParam4'] = [1, 'Two', 'Three', 4];

    if (typeof parameters['queryParam4'] !== 'undefined') {
      queryParameters['queryParam4'] = parameters['queryParam4'];
    }

    queryParameters['queryParam4'] = this.transformParameter(
      queryParameters['queryParam4'],
      'joinUsingPipes',
    );

    if (typeof parameters['queryParam5'] !== 'undefined') {
      queryParameters['queryParam5'] = parameters['queryParam5'];
    }

    queryParameters['queryParam5'] = this.transformParameter(
      queryParameters['queryParam5'],
    );

    path = path.replace('{path_parameter_1}', pathParameter1);

    path = path.replace('{path_parameter_2}', pathParameter2);

    path = path.replace('{path_parameter_3}', pathParameter3);

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }

  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   * @param {} parameters.data -
   * @param {string} pathParameter1 -
   * @param {string} pathParameter2 -
   * @param {string} pathParameter3 -
   */
  simplePostOperation(
    pathParameter1,
    pathParameter2,
    pathParameter3,
    parameters = {},
  ) {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Accept', 'application/json');
    headers.append('Content-Type', 'application/json');

    if (typeof parameters['data'] !== 'undefined') {
      body = parameters['data'];
    }

    if (typeof parameters['data'] === 'undefined') {
      throw Error('Missing required parameter: data');
    }

    path = path.replace('{path_parameter_1}', pathParameter1);

    path = path.replace('{path_parameter_2}', pathParameter2);

    path = path.replace('{path_parameter_3}', pathParameter3);

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }

  /**
   *
   * @method
   * @param {object} parameters - method options and parameters
   */
  endpointWithoutOkResponse(parameters = {}) {
    let path = '/endpoint-without-ok-response';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers.append('Accept', 'application/json');

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }

  /**
   * Upload new document
   * @method
   * @param {object} parameters - method options and parameters
   * @param {file} parameters.upload - File to be uploaded
   */
  simpleUpload(parameters = {}) {
    let path = '/upload';
    let body = {};
    let queryParameters = {};
    let headers = new Headers();
    let form = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'multipart/form-data');

    if (typeof parameters['upload'] !== 'undefined') {
      form['upload'] = parameters['upload'];
    }

    if (typeof parameters['upload'] === 'undefined') {
      throw Error('Missing required parameter: upload');
    }

    queryParameters = this.mergeQueryParams(parameters, queryParameters);

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
      form,
    );
  }
}

export default new Api();
export { Api };
"
`;

exports[`Generates TYPESCRIPT class from Open Api 3.0 spec 1`] = `
"/* tslint:disable */
/* eslint:disable */
import 'isomorphic-fetch';

export type ThenArg<T> = T extends Promise<infer U>
  ? U
  : T extends (...args: any[]) => Promise<infer U>
  ? U
  : T;

type QueryParameters = {
  [key: string]:
    | string
    | number
    | string[]
    | number[]
    | boolean
    | boolean[]
    | undefined;
};

export type Something = {
  _id?: string;
};

class ApiError {
  public message: string;
  public details: Error | null = null;

  constructor(message: string) {
    this.message = message;
  }
}

/**
 *
 * @class Api
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Api {
  protected baseUrl: string = '';
  protected headers: { name: string; value: string }[] = [];
  protected token: string = '';

  serializeQueryParams(parameters: QueryParameters) {
    return Object.keys(parameters)
      .reduce((acc: string[], p) => {
        const param = parameters[p];
        if (typeof param === 'undefined' || param === '') {
          return acc;
        }
        return [
          ...acc,
          \`\${encodeURIComponent(p)}=\${encodeURIComponent(
            String(parameters[p]),
          )}\`,
        ];
      }, [])
      .join('&');
  }

  protected transformParameter(value: any, transformOperation?: string) {
    switch (transformOperation) {
      case 'joinUsingPipes':
        return Array.isArray(value) ? value.join('|') : value;
      default:
        return value;
    }
  }

  public setBaseUrl(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  public setHeaders(headers: { name: string; value: string }[]) {
    this.headers = headers;
  }

  public setToken(token: string) {
    this.token = token;
  }

  protected appendAuthHeaders(headerParams: Headers) {
    const headers = new Headers(headerParams);
    if (this.token) {
      headers.append('Authorization', \`Bearer \${this.token}\`);
    }
    return headers;
  }

  private async request(
    method: string,
    url: string,
    body: any,
    headers: Headers = new Headers(),
    queryParameters: QueryParameters = {},
  ) {
    const queryParams =
      queryParameters && Object.keys(queryParameters).length
        ? this.serializeQueryParams(queryParameters)
        : null;
    const urlWithParams = url + (queryParams ? '?' + queryParams : '');

    if (headers.get('Content-Type') === 'multipart/form-data') {
      const form = new FormData();
      for (let k in body) {
        form.append(k, body[k]);
      }
      body = form;
    } else if (
      headers.get('Content-Type') === 'application/json' &&
      body &&
      Object.keys(body).length > 0
    ) {
      body = JSON.stringify(body);
    } else {
      body = undefined;
    }

    if (headers.get('Content-Type') === 'multipart/form-data') {
      headers.delete('Content-Type');
    }

    if (this.headers.length > 0) {
      this.headers.forEach((h) => {
        headers.append(h.name, h.value);
      });
    }

    const response = await fetch(urlWithParams, { method, headers, body });

    if (response.status === 204) return response;

    if (response.ok) {
      const responseContentType =
        (response.headers && response.headers.get('Content-Type')) || '';
      if (responseContentType.includes('application/json')) {
        return response.json();
      }
      return response;
    } else {
      const err = new ApiError(response.statusText);
      err.details = await response.json();
      throw err;
    }
  }

  /**
   *
   * @method
   * @name Api#simpleGetOperation
   */
  simpleGetOperation(
    pathParameter1: string,
    pathParameter2: string,
    pathParameter3: string,
    parameters: {
      queryParam1: string;
      queryParam2?: Array<string>;
      queryParam3?: 'ACTIVE' | 'INACTIVE';
      queryParam4?: Array<string>;
      queryParam5?: string;
    },
  ): Promise<{
    items?: Array<{
      _id?: string;

      date?: string;

      name?: string;

      ttl?: number;

      status_log?: Array<{
        ips?: Array<string | null> | null;
      }>;
    }>;
  }> {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers.append('Accept', 'application/json');

    if (typeof parameters['queryParam1'] !== 'undefined') {
      queryParameters['queryParam1'] = parameters['queryParam1'];
    }

    queryParameters['queryParam1'] = this.transformParameter(
      queryParameters['queryParam1'],
    );

    if (typeof parameters['queryParam1'] === 'undefined') {
      throw new Error('Missing required parameter: queryParam1');
    }

    if (typeof parameters['queryParam2'] !== 'undefined') {
      queryParameters['queryParam2'] = parameters['queryParam2'];
    }

    queryParameters['queryParam2'] = this.transformParameter(
      queryParameters['queryParam2'],
    );

    queryParameters['query_param_3'] = 'ACTIVE';

    if (typeof parameters['queryParam3'] !== 'undefined') {
      queryParameters['query_param_3'] = parameters['queryParam3'];
    }

    queryParameters['query_param_3'] = this.transformParameter(
      queryParameters['query_param_3'],
    );

    queryParameters['queryParam4'] = [1, 'Two', 'Three', 4];

    if (typeof parameters['queryParam4'] !== 'undefined') {
      queryParameters['queryParam4'] = parameters['queryParam4'];
    }

    queryParameters['queryParam4'] = this.transformParameter(
      queryParameters['queryParam4'],
      'joinUsingPipes',
    );

    if (typeof parameters['queryParam5'] !== 'undefined') {
      queryParameters['queryParam5'] = parameters['queryParam5'];
    }

    queryParameters['queryParam5'] = this.transformParameter(
      queryParameters['queryParam5'],
    );

    path = path.replace('{path_parameter_1}', pathParameter1.toString());

    path = path.replace('{path_parameter_2}', pathParameter2.toString());

    path = path.replace('{path_parameter_3}', pathParameter3.toString());

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      {},
      headers,
      queryParameters,
    );
  }
  /**
   *
   * @method
   * @name Api#simplePostOperation
   */
  simplePostOperation(
    pathParameter1: string,
    pathParameter2: string,
    pathParameter3: string,
    parameters: {} = {},
    body: {
      date?: string;

      ttl?: number;

      ips?: Array<string | null> | null;
    },
  ): Promise<Something> {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'application/json');
    headers.append('Accept', 'application/json');

    path = path.replace('{path_parameter_1}', pathParameter1.toString());

    path = path.replace('{path_parameter_2}', pathParameter2.toString());

    path = path.replace('{path_parameter_3}', pathParameter3.toString());

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
    );
  }
  /**
   *
   * @method
   * @name Api#simpleUploadOperation
   */
  simpleUploadOperation(
    parameters: {} = {},
    form: {
      upload: File;
    },
  ): Promise<{
    _id?: string;
  }> {
    let path = '/upload';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'multipart/form-data');
    headers.append('Accept', 'application/json');

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      form,
      headers,
      queryParameters,
    );
  }
  /**
   *
   * @method
   * @name Api#endpointWithoutOkResponse
   */
  endpointWithoutOkResponse(parameters: {} = {}): Promise<void> {
    let path = '/endpoint-without-ok-response';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers.append('Accept', 'application/json');

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      {},
      headers,
      queryParameters,
    );
  }
  /**
   *
   * @method
   * @name Api#endpointWithAllOf
   */
  endpointWithAllOf(parameters: {} = {}): Promise<
    Array<{
      _id: string;

      name?: string;
    }>
  > {
    let path = '/endpoint-with-all-of';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers.append('Accept', 'application/json');

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      {},
      headers,
      queryParameters,
    );
  }
}

export default new Api();
export { Api };
"
`;

exports[`Generates TYPESCRIPT class from Swagger 2 spec 1`] = `
"/* tslint:disable */
import 'isomorphic-fetch';

export type ThenArg<T> = T extends Promise<infer U>
  ? U
  : T extends (...args: any[]) => Promise<infer U>
  ? U
  : T;

type QueryParameters = {
  [key: string]:
    | string
    | number
    | string[]
    | number[]
    | boolean
    | boolean[]
    | undefined;
};

export type Something = {
  _id?: string;
};

class ApiError {
  public message: string;
  public details: Error | null = null;

  constructor(message: string) {
    this.message = message;
  }
}

/**
 *
 * @class Api
 * @param {(string)} [domainOrOptions] - The project domain.
 */
class Api {
  protected baseUrl: string = '';
  protected headers: { name: string; value: string }[] = [];
  protected token: string = '';

  serializeQueryParams(parameters: QueryParameters) {
    return Object.keys(parameters)
      .reduce((acc: string[], p) => {
        const param = parameters[p];
        if (typeof param === 'undefined' || param === '') {
          return acc;
        }
        return [
          ...acc,
          \`\${encodeURIComponent(p)}=\${encodeURIComponent(
            String(parameters[p]),
          )}\`,
        ];
      }, [])
      .join('&');
  }

  protected transformParameter(value: any, transformOperation?: string) {
    switch (transformOperation) {
      case 'joinUsingPipes':
        return Array.isArray(value) ? value.join('|') : value;
      default:
        return value;
    }
  }

  public setBaseUrl(baseUrl: string) {
    this.baseUrl = baseUrl;
  }

  public setHeaders(headers: { name: string; value: string }[]) {
    this.headers = headers;
  }

  public setToken(token: string) {
    this.token = token;
  }

  protected appendAuthHeaders(headerParams: Headers) {
    const headers = new Headers(headerParams);
    if (this.token) {
      headers.append('Authorization', \`Bearer \${this.token}\`);
    }
    return headers;
  }

  private async request(
    method: string,
    url: string,
    body: any,
    headers: Headers = new Headers(),
    queryParameters: QueryParameters = {},
  ) {
    const queryParams =
      queryParameters && Object.keys(queryParameters).length
        ? this.serializeQueryParams(queryParameters)
        : null;
    const urlWithParams = url + (queryParams ? '?' + queryParams : '');

    if (headers.get('Content-Type') === 'multipart/form-data') {
      const form = new FormData();
      for (let k in body) {
        form.append(k, body[k]);
      }
      body = form;
    } else if (
      headers.get('Content-Type') === 'application/json' &&
      body &&
      Object.keys(body).length > 0
    ) {
      body = JSON.stringify(body);
    } else {
      body = undefined;
    }

    if (headers.get('Content-Type') === 'multipart/form-data') {
      headers.delete('Content-Type');
    }

    if (this.headers.length > 0) {
      this.headers.forEach((h) => {
        headers.append(h.name, h.value);
      });
    }

    const response = await fetch(urlWithParams, { method, headers, body });

    if (response.status === 204) return response;

    if (response.ok) {
      const responseContentType =
        (response.headers && response.headers.get('Content-Type')) || '';
      if (responseContentType.includes('application/json')) {
        return response.json();
      }
      return response;
    } else {
      const err = new ApiError(response.statusText);
      err.details = await response.json();
      throw err;
    }
  }

  /**
   *
   * @method
   * @name Api#simpleGetOperation
   */
  simpleGetOperation(
    pathParameter1: string,
    pathParameter2: string,
    pathParameter3: string,
    parameters: {
      queryParam1: string;
      queryParam2?: Array<string>;
      queryParam3?: 'ACTIVE' | 'INACTIVE';
      queryParam4?: Array<string>;
      queryParam5?: string;
    },
  ): Promise<{
    items?: Array<{
      _id?: string;

      date?: string;

      name?: string;

      ttl?: number;

      status_log?: Array<{
        ips?: Array<string | null> | null;
      }>;
    }>;
  }> {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers.append('Accept', 'application/json');

    if (typeof parameters['queryParam1'] !== 'undefined') {
      queryParameters['queryParam1'] = parameters['queryParam1'];
    }

    queryParameters['queryParam1'] = this.transformParameter(
      queryParameters['queryParam1'],
    );

    if (typeof parameters['queryParam1'] === 'undefined') {
      throw new Error('Missing required parameter: queryParam1');
    }

    if (typeof parameters['queryParam2'] !== 'undefined') {
      queryParameters['queryParam2'] = parameters['queryParam2'];
    }

    queryParameters['queryParam2'] = this.transformParameter(
      queryParameters['queryParam2'],
    );

    queryParameters['query_param_3'] = 'ACTIVE';

    if (typeof parameters['queryParam3'] !== 'undefined') {
      queryParameters['query_param_3'] = parameters['queryParam3'];
    }

    queryParameters['query_param_3'] = this.transformParameter(
      queryParameters['query_param_3'],
    );

    queryParameters['queryParam4'] = [1, 'Two', 'Three', 4];

    if (typeof parameters['queryParam4'] !== 'undefined') {
      queryParameters['queryParam4'] = parameters['queryParam4'];
    }

    queryParameters['queryParam4'] = this.transformParameter(
      queryParameters['queryParam4'],
      'joinUsingPipes',
    );

    if (typeof parameters['queryParam5'] !== 'undefined') {
      queryParameters['queryParam5'] = parameters['queryParam5'];
    }

    queryParameters['queryParam5'] = this.transformParameter(
      queryParameters['queryParam5'],
    );

    path = path.replace('{path_parameter_1}', pathParameter1.toString());

    path = path.replace('{path_parameter_2}', pathParameter2.toString());

    path = path.replace('{path_parameter_3}', pathParameter3.toString());

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      {},
      headers,
      queryParameters,
    );
  }

  /**
   *
   * @method
   * @name Api#simplePostOperation
   */
  simplePostOperation(
    pathParameter1: string,
    pathParameter2: string,
    pathParameter3: string,
    parameters: {},
    body: {
      date?: string;

      ttl?: number;

      ips?: Array<string | null> | null;
    },
  ): Promise<Something> {
    let path =
      '/path/{path_parameter_1}/segment/{path_parameter_2}/{path_parameter_3}';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Accept', 'application/json');
    headers.append('Content-Type', 'application/json');

    path = path.replace('{path_parameter_1}', pathParameter1.toString());

    path = path.replace('{path_parameter_2}', pathParameter2.toString());

    path = path.replace('{path_parameter_3}', pathParameter3.toString());

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      body,
      headers,
      queryParameters,
    );
  }

  /**
   *
   * @method
   * @name Api#endpointWithoutOkResponse
   */
  endpointWithoutOkResponse(parameters: {} = {}): Promise<void> {
    let path = '/endpoint-without-ok-response';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers.append('Accept', 'application/json');

    return this.request(
      'GET',
      \`\${this.baseUrl}\${path}\`,
      {},
      headers,
      queryParameters,
    );
  }

  /**
   * Upload new document
   * @method
   * @name Api#simpleUpload
   */
  simpleUpload(
    parameters: {},
    form: {
      upload: File;
    },
  ): Promise<{}> {
    let path = '/upload';
    let headers: Headers = new Headers();
    let queryParameters: QueryParameters = {};

    headers = this.appendAuthHeaders(headers);
    headers.append('Content-Type', 'multipart/form-data');

    return this.request(
      'POST',
      \`\${this.baseUrl}\${path}\`,
      form,
      headers,
      queryParameters,
    );
  }
}

export default new Api();
export { Api };
"
`;
