/* eslint-disable */
import 'isomorphic-fetch';

class {{&className}} {

  constructor() {
    this.baseUrl = null;
    this.token = null;
    this.headers = [];
  }

  serializeQueryParams(parameters) {
    return Object.keys(parameters)
      .reduce((acc, p) => {
        const param = parameters[p];
        if (typeof param === 'undefined' || param === '') {
          return acc;
        }
        return [
          ...acc,
          `${encodeURIComponent(p)}=${encodeURIComponent(
            String(parameters[p]),
          )}`,
        ];
      }, [])
      .join('&');
  }

  paramsToObject(params) {
    let query = params.substr(1);
    let result = {};
    query.split("&").forEach(function (part) {
        let item = part.split("=");
        result[item[0]] = decodeURIComponent(item[1]);
    });
    return result;
  }

  mergeQueryParams(parameters, queryParameters) {
    if (parameters.$queryParameters) {
      Object.keys(parameters.$queryParameters)
          .forEach(function(parameterName) {
            const parameter = parameters.$queryParameters[parameterName];
            queryParameters[parameterName] = parameter;
      });
    }
    return queryParameters;
  }

  transformParameter(value, transformOperation = null) {
    switch(transformOperation) {
      case 'joinUsingPipes':
        return Array.isArray(value) ? value.join('|') : value;
      default:
        return value;
    }
  }

   /**
    * HTTP Request
    * @method
    * @param {string} method - http method
    * @param {string} url - url to do request
    * @param {object} body - body parameters / object
    * @param {object} headers - header parameters
    * @param {object} queryParameters - querystring parameters
    */
  request(method, url, body, headers, queryParameters, form, checkFor401 = true) {
    const queryParams = queryParameters && Object.keys(queryParameters).length ? this.serializeQueryParams(queryParameters) : null ;
    const urlWithParams = url + (queryParams ? '?' + queryParams : '');

    // ugly hack, we need to delete Content-Type header with multipart/form-data
    // that way, browser will calculate form specific headers on it's own
    if (headers.get('Content-Type') === 'multipart/form-data') {
      headers.delete('Content-Type');
    }

    if (body && !Object.keys(body).length) {
      body = undefined;
    } else {
      body = JSON.stringify(body);
    }

    if (form && Object.keys(form).length) {
      body = new FormData();
      for (let k in form) {
        body.append(k, form[k]);
      }
    }

    if (this.headers.length > 0) {
        this.headers.forEach(h => {
            headers.append(h.name, h.value);
        });
    }

    return fetch(urlWithParams, {
      method,
      headers,
      body,
      cache: 'no-store'
    })
      .then((response) => {
        if (checkFor401) {
          if (response.status === 401) {
            if (typeof this._onResponseUnauthorized === 'function') {
              this._onResponseUnauthorized();
            } else {
              let error = new Error(response.statusText);
              error.response = response;
              throw error;
            }
          }
        }

        if (response.status === 204) return response;
        
        if (response.ok) {
          const responseContentType =
            (response.headers && response.headers.get('Content-Type')) || '';
          if (responseContentType.includes('application/json')) {
            return response.json();
          }
          return response;
        } else {
          let error = new Error(response.statusText);
          error.response = response;
          throw error;
        }
      })
      .catch((error) => {
        return error.response.json().then((error_details) => {
          error.details = error_details;
          throw error;
        });
      });
  }

  /**
  * Set base url
  * @method
  * @param {string} baseUrl
  */
  setBaseUrl(baseUrl) {
    this.baseUrl = baseUrl;
  }

  /**
  * Set Headers
  * @method
  * @param headers - array of headers
  */
  setHeaders(headers) {
    this.headers = headers;
  }

  set onResponseUnauthorized(callback) {
    this._onResponseUnauthorized = callback;
  }

  /**
  * Redirects a user to a given url
  * @method
  * @param {string} url
  */
  redirect(url) {
    window.location = url;
  }

  {{#isSecure}}
    {{#isSecureToken}}
      /**
      * Set Token
      * @method
      * @param {string} token - token's value
      */
      setToken(token) {
        this.token = token;
      }

    {{/isSecureToken}}
    /**
    * Set Auth headers
    * @method
    * @param {object} headerParams - headers object
    */
    appendAuthHeaders(headerParams) {
      const headers = new Headers(headerParams);
    {{#isSecureToken}}
      if (this.token) {
         headers.append('Authorization', `Bearer ${this.token}`);
      }
    {{/isSecureToken}}
      return headers;
    }
  {{/isSecure}}

  {{#methods}}
    {{> method}}
  {{/methods}}
}

export default new {{&className}}();
export { {{&className}} };
